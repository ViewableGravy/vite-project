// kawaii-scss-vars-plugin.js

import fs from 'fs';
import path from 'path';
import sass from 'sass';

function extractCssVariables(content) {
  // UwU Here, we're using a regex to find CSS variables in the SCSS content!
  const regex = /(--[a-zA-Z0-9_-]+)\s*:/g;
  const matches = content.matchAll(regex);
  const variables = {};

  for (const match of matches) {
    const variableName = match[1];
    variables[variableName] = ''; // You can put a default value or leave it empty~
  }

  return variables;
}

function extractFirstCssClassName(content) {
  // UwU Here, we're using a regex to find the first CSS class name in the SCSS content!
  const regex = /\.([a-zA-Z0-9_-]+)/;
  const matches = content.match(regex);

  return matches ? matches[1] : '';
}

/**
 * Takes a string of a css file and the baseClassName and returns all bem elements. For example
 * 
 * if content has .MyComponent, .MyComponent__test and .MyComponent__test--active
 * 
 * it should return
 * 
 * ["test"]
 * 
 * if it had
 * 
 * .MyComponent, .MyComponent__test, .MyComponent__test2--active, .MyComponent__test3--active__sub
 * 
 * it should return
 * 
 * ["test", "test2", "test3"]
 */
function extractAllCSSElements(content, baseClassName) {
  const regex = new RegExp(`\\.${baseClassName}__([a-zA-Z0-9_-]+)`, 'g');
  const matches = content.matchAll(regex);
  const elements = [];

  for (const match of matches) {
    elements.push(match[1]);
  }

  return elements;
}

function generateFunction(variables, scssName = "styles.scss", className = '', allCSSElements = []) {
  const fileName = scssName
    .replace('.scss', '')
    .split('/')
    .pop()
    .replace(/^_/, '');
  const typeName = `TStyled${fileName}`;

  const content = `/***** FILE GENERATED BY SCSS-PLUGIN FOR VITE *****/
  
/***** BASE IMPORTS *****/
import React from "react";

/***** TYPE DEFINITIONS *****/
type ${typeName}Props = React.CSSProperties & {
  ${Object.keys(variables).map((variable) => `"${variable}"?: string;`).join('\n  ')}
};
type ${typeName} = (args: ${typeName}Props) => [React.CSSProperties, typeof bemBuilder];
type TElement = \n  | ${allCSSElements.map((element) => `"${element}"`).join('\n  | ')}

const bemBuilder = Object.assign((element?: TElement) => {
  if (!element) {
    return "${className}";
  }

  return "${className}" + "__" + element;
}, {
  className: "${className}",
});

/***** STYLED FUNCTION *****/
export const styled${fileName}: ${typeName} = (styles) => [styles, bemBuilder];
  `.trim() + '\n';

  return content;
}

export function kawaiiScssVarsPlugin() {
  return {
    name: 'kawaii-scss-vars-plugin',
    // UwU The transform hook allows us to modify the content of each file!
    async transform(code, id) {
      if (id.endsWith('.scss')) {
        const result = sass.renderSync({ data: code }); // Compile SCSS to CSS

        console.log(result.css.toString())

        const variables = extractCssVariables(result.css.toString());
        const className = extractFirstCssClassName(result.css.toString());
        const allCSSElements = extractAllCSSElements(result.css.toString(), className);


        const directory = path.dirname(id);
        const functionName = 'applyStyles'; // You can change this if you want!

        const functionContent = generateFunction(variables, id, className, allCSSElements);
        const outputFile = path.join(directory, `${functionName}.ts`);

        fs.writeFileSync(outputFile, functionContent); // Write the function file

        // UwU We return the modified code without any changes~
        return {
          code,
          map: null,
        };
      }
    },
  };
}
